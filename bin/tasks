#! /usr/bin/env node --harmony

'use strict';

// Dependencies
var co            = require('co');
var colors        = require('colors');
var date          = require('date.js');
var moment        = require('moment-twitter');
var parse         = require('../lib/parser');
var pkg           = require('../package');
var program       = require('commander');
var Tasks         = require('tasks-model');
var tasks         = new Tasks();


// cli

program
  .version(pkg.version)
  .option('-v, --verbose', 'verbose logs')
;

program
  .command('add [options...]')
  .description('add new task')
  .action(co(add))
;

program
  .command('update <id> [options...]')
  .description('update task by id')
  .action(co(update))
;

program
  .command('get [id|tag]')
  .description('get tasks by id or tag')
  .option('-c, --count', 'show only count')
  .action(co(get))
;

program
  .command('next [tag]')
  .description('show next tasks if no opts')
  .action(co(next))
;

program
  .command('find <text>')
  .description('find tasks by text query')
  .action(co(find))
;
program
  .command('done <id...>')
  .description('mark task as finished')
  .action(co(done))
;

program
  .command('remove <id...>')
  .description('remove task')
  .action(co(remove))
;

program.parse(process.argv);


// Methods
// TODO: move to lib

// add task
function * add (options) {
  var task = parse(options.join(' '));
  task.tags = task.tags
    ? sliceTags(task.tags)
    : ['inbox'];
  parseDate(task);
  task = yield tasks.add(task);
  program.verbose
    ? print(task)
    : console.log('created #' + task.uid.toString().blue);
  process.exit(0);
}

// update task by id
function * update (options) {
  var id = trim(options[0]);
  var task = parse(options.join(' '));
  if (task.tags) { (task.tags = sliceTags(task.tags)); }
  parseDate(task);
  yield tasks.update(id, task);
  task = yield tasks.get(id);
  program.verbose
    ? print(task)
    : console.log('updated #' + task.uid.toString().blue);
  process.exit(0);
}

// delete task by id
function * remove (ids) {
  var thunks = ids.map(function(id) {
    id = trim(id);
    return function * () {
      console.log('removed #' + id.black);
      yield tasks.remove(id);
    };
  });
  yield thunks;
  process.exit(0);
}

// get tasks by id or key
function * get (id, options) {
  if (id) { id = trim(id); }
  var list = [].concat(yield tasks.get(id)); // always is array! :D
  options.count
    ? console.log(list.length)
    : print(list);
  process.exit(0);
}

// mark task al finished
function * done (ids) {
  var thunks = ids.map(function(id) {
    id = trim(id);
    return function * () {
      console.log('done #' + id.toString().blue);
      yield tasks.done(id);
    };
  });
  yield thunks;
  process.exit(0);
}

// find task by keywords
function * find (text) {
  // wait for index
  yield tasks.model.once.bind(tasks.model, 'index');
  var results = yield tasks.find(text);
  print(results);
  process.exit(0);
}

// list of the next tasks
function * next (tag) {
  var list = yield tasks.next(tag);
  print(list);
  process.exit(0);
}

// print task
function print (task) {
  if (Array.isArray(task)) { return task.map(print); }
  console.log();
  var str = ['#'+task.uid.toString().blue, task.name.black].join(' ');
  console.log(str);
  task.description && console.log(task.description);
  task.tags && console.log('tags: ', task.tags.reduce(function(m, tag) {
    return m.push('#' + tag.red), m;
  }, []).join(', '));
  task.start && console.log('start: ' + moment(task.start).twitter());
  task.estimate && console.log('estimate: ' + moment(task.estimate).twitter());
  if (task.due) {
    +new Date(task.due) > +new Date()
      ? console.log('due: ' + moment(task.due).twitter())
      : console.log('due: ' + moment(task.due).twitter().red);
  }
  console.log();
}

// split tags by commas
function sliceTags (tags) {
  return tags.split(',').map(function (tag) {
    return tag.trim();
  });
}

// remove leading hash and trailing commas
function trim(str) {
  return str
    .trim()
    .replace(/^#/, '')
    .replace(/,$/, '')
  ;
}

// parse human friendly data and update task object
function parseDate(task) {
  task.estimate && (task.estimate = date(task.estimate));
  task.due && (task.due = date(task.due));
  task.start && (task.start = date(task.start));
}
