#! /usr/bin/env node --harmony

'use strict';

// Dependencies
var co            = require('co');
var colors        = require('colors');
var date          = require('date.js');
var moment        = require('moment-twitter');
var parse         = require('../lib/parser');
var pkg           = require('../package');
var program       = require('commander');
var Tasks         = require('tasks-model');
var tasks         = new Tasks();

program
  .version(pkg.version)
;

program
  .command('add [options...]')
  .description('add new task')
  .action(co(add))
;

program
  .command('update <id> [options...]')
  .description('update task by id')
  .action(co(update))
;

program
  .command('get [id|tag]')
  .description('get tasks by id or tag')
  .option('-c, --count', 'show only count')
  .action(co(get))
;

program
  .command('next [tag]')
  .description('show next tasks if no opts')
  .action(co(next))
;

program
  .command('done <id...>')
  .description('mark task as finished')
  .action(co(done))
;

program.parse(process.argv);


// add task
function * add (options) {
  var task = parse(options.join(' '));
  task.tags = task.tags
    ? sliceTags(task.tags)
    : ['inbox'];
  parseDate(task);
  task = yield tasks.add(task);
  print(task[0]);
  process.exit(0);
}

// update task by id
function * update (options) {
  var id = parseInt(trimHash(options.shift()));
  var task = parse(options.join(' '));
  task.tags && (task.tags = sliceTags(task.tags));
  parseDate(task);
  yield tasks.update(id, task);
  task = yield tasks.get(id);
  print(task);
  process.exit(0);
}

// delete task by id
function remove () {
  console.log('remove');
  process.exit(0);
}

// get tasks by id or key
function * get (id, options) {
  if (id) {
    id = trimHash(id);
    id = id == parseInt(id) ? parseInt(id) : id; // TODO: stupid
  }
  var list = [].concat(yield tasks.get(id)); // always is array! :D
  options.count
    ? console.log(list.length)
    : print(list);
  process.exit(0);
}

// mark task al finished
function * done (ids) {
  ids = [].concat(ids);
  var thunks = ids.map(function(id) {
    id = parseInt(trimHash(id));
    return function * () {
      console.log('done #' + id.toString().blue);
      yield tasks.done(id);
    };
  });
  yield thunks;
  process.exit(0);
}

// find task by keywords
function find () {
  console.log('find');
  process.exit(0);
}

// list of the next tasks
function * next (tag) {
  var list = yield tasks.next(tag);
  print(list);
  process.exit(0);
}

// print task
// TODO: make it super awesome
function print (task) {
  if (Array.isArray(task)) { return task.map(print); }
  console.log();
  var str = ['#'+task._id.toString().blue, task.name.black].join(' ');
  console.log(str);
  task.description && console.log(task.description);
  task.tags && console.log('tags: ', task.tags.reduce(function(m, tag) {
    return m.push('#' + tag.red), m;
  }, []).join(', '));
  task.start && console.log('start: ' + moment(task.start).twitter());
  task.estimate && console.log('estimate: ' + moment(task.estimate).twitter());
  if (task.due) {
    +new Date(task.due) > +new Date()
      ? console.log('due: ' + moment(task.due).twitter())
      : console.log('due: ' + moment(task.due).twitter().red);
  }
  console.log();
}

function sliceTags (tags) {
  return tags.split(',').map(function (tag) {
    return tag.trim(); 
  });
}

function trimHash(str) {
  return str.replace(/^#/, '');
}

// parse human friendly data and update task object
function parseDate(task) {
  task.estimate && (task.estimate = date(task.estimate));
  task.due && (task.due = date(task.due));
  task.start && (task.start = date(task.start));
}
